{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *  SPDX-License-Identifier: Apache-2.0\n *\n */\n\n/**\n * This scripts generates the JSON search mappings files at src/schema based on the FHIR definitions.\n *\n * You can download the latest FHIR definitions from https://www.hl7.org/fhir/downloads.html or find older FHIR versions at http://hl7.org/fhir/directory.html\n *\n * Run the script:\n * > ts-node index.ts <pathToFhirDefinitionsFolder>\n */\n\nimport { mapValues, uniqBy } from 'lodash';\nimport fs from 'fs';\nimport { join, relative } from 'path';\nimport { CompiledSearchParameter, SearchField } from './types';\nimport { ProfilesRegistry } from './profilesRegistry';\nimport { getTypeFromField } from './choiceDataTypes';\nimport { EDGE_CASES, EXTENSION_FIELDS } from './constants';\n\nconst args = process.argv.slice(2);\nif (!args[0]) {\n    console.error('Error. Missing pathToFhirDefinitionsFolder parameter');\n    console.error(`Usage: ts-node ${relative(process.cwd(), __filename)} <pathToFhirDefinitionsFolder>`);\n    process.exit(1);\n}\n\nconst pathToFhirDefinitionsFolder = args[0];\nconst profilesRegistry = new ProfilesRegistry(pathToFhirDefinitionsFolder);\n\nconst fhirVersionFromFiles = profilesRegistry.getFhirVersion();\n// 3.0.1 downloads are not available on the FHIR website anymore.\n// We've been referring to the latest STU3 definitions (3.0.2) for a while but we still use the 3.0.1 string in our codebase\nconst fhirVersion = fhirVersionFromFiles === '3.0.2' ? '3.0.1' : fhirVersionFromFiles;\n\n// eslint-disable-next-line import/no-dynamic-require\nconst compiledSearchParameters: CompiledSearchParameter[] = require(`../../src/schema/compiledSearchParameters.${fhirVersion}.json`);\n\nconsole.log(`Generating mappings for FHIR version ${fhirVersion}`);\n\nconst resolveFieldType = (x: SearchField, resourceType: string): SearchField => {\n    if (EDGE_CASES?.[resourceType]?.[x.field]) {\n        return {\n            ...x,\n            type: EDGE_CASES[resourceType][x.field],\n        };\n    }\n\n    const typeFromRegistry = profilesRegistry.getTypeForField(resourceType, x.field);\n    if (typeFromRegistry) {\n        if (typeFromRegistry === 'BackboneElement') {\n            return {\n                ...x,\n                type: undefined,\n                error: 'BackboneElement type is not searchable',\n            };\n        }\n        return {\n            ...x,\n            type: typeFromRegistry,\n        };\n    }\n\n    const checkMultiType = profilesRegistry.getTypeForField(resourceType, `${x.field}[x]`);\n    if (checkMultiType) {\n        return {\n            ...x,\n            type: undefined,\n            error: 'Missing choice of data type',\n        };\n    }\n\n    const inferredTypeFromFieldName = getTypeFromField(x.field);\n    if (inferredTypeFromFieldName) {\n        return {\n            ...x,\n            type: inferredTypeFromFieldName,\n        };\n    }\n\n    const parts = x.field.split('.');\n\n    if (parts.length < 2) {\n        return {\n            ...x,\n            type: undefined,\n        };\n    }\n\n    const child = parts.pop()!;\n    const parent = parts.join('.');\n\n    const typeFromParent = resolveFieldType({ field: parent }, resourceType);\n\n    const typeFromRecursiveLookUp = resolveFieldType({ field: child }, typeFromParent.type);\n    return {\n        ...x,\n        type: typeFromRecursiveLookUp.type,\n    };\n};\n\nconst searchableFields: {\n    [resourceType: string]: SearchField[];\n} = {};\n\ncompiledSearchParameters.forEach((compiledSearchParameter) => {\n    searchableFields[compiledSearchParameter.base] = searchableFields[compiledSearchParameter.base] ?? [];\n\n    const fields: { field: string; type?: string }[] = compiledSearchParameter.compiled.flatMap((s) => {\n        const output = [{ field: s.path }];\n        if (s.condition) {\n            output.push({ field: s.condition[0] });\n        }\n        return output;\n    });\n\n    searchableFields[compiledSearchParameter.base].push(...fields);\n});\n\nsearchableFields.Resource.push(...EXTENSION_FIELDS.map((field) => ({ field })));\n\nconst uniqSearchableFields = mapValues(searchableFields, (x) => uniqBy(x, (s) => s.field));\n\nconst searchableFieldsWithResolvedTypes = mapValues(uniqSearchableFields, (fieldsArr, resourceType) =>\n    fieldsArr\n        .map((s) => resolveFieldType(s, resourceType))\n        .filter((x) => {\n            if (x.error) {\n                console.warn(`Skipping ${resourceType}.${x.field} due to error: ${x.error}`);\n                return false;\n            }\n            return true;\n        }),\n);\n\nfs.writeFileSync(\n    join(__dirname, '..', '..', 'src', 'schema', `searchMappingsBase.${fhirVersion}.json`),\n    JSON.stringify(searchableFieldsWithResolvedTypes, null, 2),\n);\n"]}