{"version":3,"file":"profilesRegistry.js","sourceRoot":"","sources":["profilesRegistry.ts"],"names":[],"mappings":";AAAA,iDAAiD;AACjD;;;;GAIG;;;;;;AAEH,4CAAoB;AAGpB,MAAM,YAAY,GAAG,CAAC,YAAoB,EAAE,EAAE,CAAC,2CAA2C,YAAY,EAAE,CAAC;AAEzG;;;;GAIG;AACH,MAAa,gBAAgB;IAGzB;;OAEG;IACH,YAAY,2BAAmC;QAC3C,MAAM,SAAS,GAAG;YACd,GAAG,2BAA2B,0BAA0B;YACxD,GAAG,2BAA2B,sBAAsB;SACvD,CAAC;QAEF,IAAI,CAAC,oBAAoB,GAAG,SAAS,CAAC,OAAO,CACzC,CAAC,QAAgB,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,YAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,KAAK,CAC1F,CAAC;IACN,CAAC;IAED,eAAe,CAAC,YAAoB,EAAE,KAAa;QAC/C,MAAM,QAAQ,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC;QAEjG,IAAI,QAAQ,KAAK,SAAS,EAAE;YACxB,OAAO,SAAS,CAAC;SACpB;QAED,MAAM,YAAY,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,GAAG,YAAY,IAAI,KAAK,EAAE,CAAC,CAAC;QAE3G,IAAI,YAAY,KAAK,SAAS,EAAE;YAC5B,OAAO,SAAS,CAAC;SACpB;QAED,IAAI,YAAY,CAAC,IAAI,KAAK,SAAS,EAAE;YACjC,OAAO,SAAS,CAAC;SACpB;QAED,OAAO,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACrC,CAAC;IAED,cAAc;QACV,OAAO,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC;IAC7D,CAAC;CACJ;AAxCD,4CAwCC","sourcesContent":["/* eslint-disable import/prefer-default-export */\n/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *  SPDX-License-Identifier: Apache-2.0\n *\n */\n\nimport fs from 'fs';\nimport { FhirProfiles } from './types';\n\nconst buildFullUrl = (resourceType: string) => `http://hl7.org/fhir/StructureDefinition/${resourceType}`;\n\n/**\n * Parses FHIR profiles json files\n * https://www.hl7.org/fhir/definitions.json.zip\n * http://hl7.org/fhir/STU3/definitions.json.zip\n */\nexport class ProfilesRegistry {\n    private readonly structureDefinitions: FhirProfiles.Entry[];\n\n    /**\n     * @param pathToFhirDefinitionsFolder - path to the unzipped FHIR definitions folder (most likely downloaded from @link https://www.hl7.org/fhir/definitions.json.zip)\n     */\n    constructor(pathToFhirDefinitionsFolder: string) {\n        const fileNames = [\n            `${pathToFhirDefinitionsFolder}/profiles-resources.json`,\n            `${pathToFhirDefinitionsFolder}/profiles-types.json`,\n        ];\n\n        this.structureDefinitions = fileNames.flatMap(\n            (fileName: string) => JSON.parse(fs.readFileSync(fileName, { encoding: 'utf8' })).entry,\n        );\n    }\n\n    getTypeForField(resourceType: string, field: string): string | undefined {\n        const resource = this.structureDefinitions.find((s) => s.fullUrl === buildFullUrl(resourceType));\n\n        if (resource === undefined) {\n            return undefined;\n        }\n\n        const profileField = resource.resource.snapshot.element.find((el) => el.id === `${resourceType}.${field}`);\n\n        if (profileField === undefined) {\n            return undefined;\n        }\n\n        if (profileField.type === undefined) {\n            return undefined;\n        }\n\n        return profileField.type[0].code;\n    }\n\n    getFhirVersion(): string {\n        return this.structureDefinitions[0].resource.fhirVersion;\n    }\n}\n"]}