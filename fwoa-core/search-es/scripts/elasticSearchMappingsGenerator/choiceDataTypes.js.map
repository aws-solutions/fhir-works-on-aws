{"version":3,"file":"choiceDataTypes.js","sourceRoot":"","sources":["choiceDataTypes.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;;AAEH,MAAM,SAAS,GAAG;IACd,cAAc;IACd,SAAS;IACT,WAAW;IACX,MAAM;IACN,MAAM;IACN,UAAU;IACV,SAAS;IACT,IAAI;IACJ,SAAS;IACT,SAAS;IACT,UAAU;IACV,KAAK;IACL,aAAa;IACb,QAAQ;IACR,MAAM;IACN,aAAa;IACb,KAAK;IACL,KAAK;IACL,MAAM;IACN,SAAS;IACT,KAAK;IACL,YAAY;IACZ,YAAY;IACZ,iBAAiB;IACjB,QAAQ;IACR,cAAc;IACd,OAAO;IACP,UAAU;IACV,UAAU;IACV,WAAW;IACX,YAAY;IACZ,OAAO;IACP,QAAQ;IACR,UAAU;IACV,OAAO;IACP,OAAO;IACP,WAAW;IACX,aAAa;IACb,WAAW;IACX,QAAQ;IACR,eAAe;IACf,aAAa;IACb,iBAAiB;IACjB,YAAY;IACZ,qBAAqB;IACrB,iBAAiB;IACjB,mBAAmB;IACnB,cAAc;IACd,QAAQ;IACR,MAAM;CACT,CAAC;AAEF,MAAM,qBAAqB,GAAG,CAAC,MAAc,EAAE,EAAE;IAC7C,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC;AAEF,wDAAwD;AACxD,SAAgB,gBAAgB,CAAC,KAAa;IAC1C,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3E,CAAC;AAFD,4CAEC","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *  SPDX-License-Identifier: Apache-2.0\n *\n */\n\nconst fhirTypes = [\n    'base64Binary',\n    'boolean',\n    'canonical',\n    'code',\n    'date',\n    'dateTime',\n    'decimal',\n    'id',\n    'instant',\n    'integer',\n    'markdown',\n    'oid',\n    'positiveInt',\n    'string',\n    'time',\n    'unsignedInt',\n    'uri',\n    'url',\n    'uuid',\n    'Address',\n    'Age',\n    'Annotation',\n    'Attachment',\n    'CodeableConcept',\n    'Coding',\n    'ContactPoint',\n    'Count',\n    'Distance',\n    'Duration',\n    'HumanName',\n    'Identifier',\n    'Money',\n    'Period',\n    'Quantity',\n    'Range',\n    'Ratio',\n    'Reference',\n    'SampledData',\n    'Signature',\n    'Timing',\n    'ContactDetail',\n    'Contributor',\n    'DataRequirement',\n    'Expression',\n    'ParameterDefinition',\n    'RelatedArtifact',\n    'TriggerDefinition',\n    'UsageContext',\n    'Dosage',\n    'Meta',\n];\n\nconst capitalizeFirstLetter = (string: string) => {\n    return string[0].toUpperCase() + string.slice(1);\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport function getTypeFromField(field: string): string | undefined {\n    return fhirTypes.find((t) => field.endsWith(capitalizeFirstLetter(t)));\n}\n"]}