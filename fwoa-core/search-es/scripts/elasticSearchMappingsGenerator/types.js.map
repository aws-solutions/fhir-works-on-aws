{"version":3,"file":"types.js","sourceRoot":"","sources":["types.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-use-before-define */\n\n/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *  SPDX-License-Identifier: Apache-2.0\n *\n */\n\nexport type SearchField = { field: string; type?: any; error?: string };\n\n// Below types were auto generated by https://app.quicktype.io/\nexport interface Compiled {\n    resourceType: string;\n    path: string;\n    condition?: string[];\n}\n\nexport enum SearchParamType {\n    Date = 'date',\n    Number = 'number',\n    Quantity = 'quantity',\n    Reference = 'reference',\n    String = 'string',\n    Token = 'token',\n    URI = 'uri',\n}\n\nexport interface CompiledSearchParameter {\n    name: string;\n    url: string;\n    type: SearchParamType;\n    description: string;\n    base: string;\n    compiled: Compiled[];\n    target?: string[];\n}\n\nexport namespace FhirProfiles {\n    export interface Profiles {\n        resourceType: string;\n        id: string;\n        meta: Meta;\n        type: string;\n        entry: Entry[];\n    }\n\n    export interface Entry {\n        fullUrl: string;\n        resource: Resource;\n    }\n\n    export interface Resource {\n        resourceType: ResourceType;\n        id: string;\n        meta: Meta;\n        text: Text;\n        extension: ResourceExtension[];\n        url: string;\n        version: Version;\n        name: string;\n        status: ResourceStatus;\n        date: Date;\n        publisher: Publisher;\n        contact: Contact[];\n        description: string;\n        fhirVersion: Version;\n        mapping?: ResourceMapping[];\n        kind: Kind;\n        abstract: boolean;\n        type: string;\n        snapshot: Snapshot;\n        differential: Differential;\n        baseDefinition?: string;\n        derivation?: Derivation;\n        purpose?: string;\n    }\n\n    export interface Contact {\n        telecom: Telecom[];\n    }\n\n    export interface Telecom {\n        system: System;\n        value: string;\n    }\n\n    export enum System {\n        URL = 'url',\n    }\n\n    export enum Derivation {\n        Constraint = 'constraint',\n        Specialization = 'specialization',\n    }\n\n    export interface Differential {\n        element: DifferentialElement[];\n    }\n\n    export interface DifferentialElement {\n        id: string;\n        extension?: BindingExtension[];\n        path: string;\n        short?: string;\n        definition?: string;\n        min?: number;\n        max: string;\n        condition?: string[];\n        constraint?: Constraint[];\n        mapping?: ElementMapping[];\n        representation?: Representation[];\n        type?: TypeElement[];\n        slicing?: Slicing;\n        comment?: string;\n        alias?: string[];\n        requirements?: string;\n        isModifier?: boolean;\n        isModifierReason?: string;\n        isSummary?: boolean;\n        minValueInteger?: number;\n        maxValueInteger?: number;\n        maxLength?: number;\n        example?: Example[];\n        binding?: Binding;\n        orderMeaning?: string;\n        meaningWhenMissing?: string;\n    }\n\n    export interface Binding {\n        extension: BindingExtension[];\n        strength: Strength;\n        description?: string;\n        valueSet: string;\n    }\n\n    export interface BindingExtension {\n        url: string;\n        valueString?: string;\n        valueCanonical?: string;\n        valueBoolean?: boolean;\n        valueCode?: ValueCode;\n    }\n\n    export enum ValueCode {\n        Draft = 'draft',\n        Normative = 'normative',\n        The400 = '4.0.0',\n        TrialUse = 'trial-use',\n    }\n\n    export enum Strength {\n        Example = 'example',\n        Extensible = 'extensible',\n        Preferred = 'preferred',\n        Required = 'required',\n    }\n\n    export interface Constraint {\n        key: string;\n        severity: Severity;\n        human: string;\n        expression: string;\n        xpath: string;\n        source?: string;\n    }\n\n    export enum Severity {\n        Error = 'error',\n        Warning = 'warning',\n    }\n\n    export interface Example {\n        label: Label;\n        valueCode?: string;\n        valueString?: string;\n        valuePeriod?: ValuePeriod;\n        valueUrl?: string;\n        valueUri?: string;\n    }\n\n    export enum Label {\n        General = 'General',\n    }\n\n    export interface ValuePeriod {\n        start: Date;\n        end: Date;\n    }\n\n    export interface ElementMapping {\n        identity: Identity;\n        map: string;\n    }\n\n    export enum Identity {\n        Dex = 'dex',\n        Iso11179 = 'iso11179',\n        Loinc = 'loinc',\n        Orim = 'orim',\n        Rim = 'rim',\n        Servd = 'servd',\n        V2 = 'v2',\n        Vcard = 'vcard',\n    }\n\n    export enum Representation {\n        XHTML = 'xhtml',\n        XMLAttr = 'xmlAttr',\n    }\n\n    export interface Slicing {\n        discriminator: Discriminator[];\n        description: Description;\n        rules: Rules;\n    }\n\n    export enum Description {\n        ExtensionsAreAlwaysSlicedByAtLeastURL = 'Extensions are always sliced by (at least) url',\n    }\n\n    export interface Discriminator {\n        type: TypeEnum;\n        path: System;\n    }\n\n    export enum TypeEnum {\n        Value = 'value',\n    }\n\n    export enum Rules {\n        Open = 'open',\n    }\n\n    export interface TypeElement {\n        extension?: TypeExtension[];\n        code: string;\n        targetProfile?: string[];\n        profile?: string[];\n    }\n\n    export interface TypeExtension {\n        url: string;\n        valueUrl?: string;\n        valueString?: string;\n    }\n\n    export interface ResourceExtension {\n        url: string;\n        valueCode: ValueCode;\n    }\n\n    export enum Version {\n        The401 = '4.0.1',\n    }\n\n    export enum Kind {\n        ComplexType = 'complex-type',\n        PrimitiveType = 'primitive-type',\n    }\n\n    export interface ResourceMapping {\n        identity: Identity;\n        uri: string;\n        name: Name;\n    }\n\n    export enum Name {\n        HL7V2Mapping = 'HL7 v2 Mapping',\n        IHEDataElementExchangeDEX = 'IHE Data Element Exchange (DEX)',\n        ISO11179 = 'ISO 11179',\n        LOINCCodeForTheElement = 'LOINC code for the element',\n        OntologicalRIMMapping = 'Ontological RIM Mapping',\n        RIMMapping = 'RIM Mapping',\n        ServD = 'ServD',\n        VCardMapping = 'vCard Mapping',\n    }\n\n    export interface Meta {\n        lastUpdated: Date;\n    }\n\n    export enum Publisher {\n        HL7FHIRStandard = 'HL7 FHIR Standard',\n    }\n\n    export enum ResourceType {\n        StructureDefinition = 'StructureDefinition',\n    }\n\n    export interface Snapshot {\n        element: SnapshotElement[];\n    }\n\n    export interface SnapshotElement {\n        id: string;\n        extension?: BindingExtension[];\n        path: string;\n        short: string;\n        definition: string;\n        min: number;\n        max: string;\n        base: Base;\n        condition?: string[];\n        constraint?: Constraint[];\n        isModifier: boolean;\n        mapping?: ElementMapping[];\n        representation?: Representation[];\n        type?: TypeElement[];\n        isSummary?: boolean;\n        slicing?: Slicing;\n        comment?: string;\n        alias?: string[];\n        requirements?: string;\n        isModifierReason?: string;\n        minValueInteger?: number;\n        maxValueInteger?: number;\n        maxLength?: number;\n        example?: Example[];\n        binding?: Binding;\n        orderMeaning?: string;\n        meaningWhenMissing?: string;\n    }\n\n    export interface Base {\n        path: string;\n        min: number;\n        max: string;\n    }\n\n    export enum ResourceStatus {\n        Active = 'active',\n        Draft = 'draft',\n    }\n\n    export interface Text {\n        status: TextStatus;\n        div: string;\n    }\n\n    export enum TextStatus {\n        Generated = 'generated',\n    }\n}\n"]}