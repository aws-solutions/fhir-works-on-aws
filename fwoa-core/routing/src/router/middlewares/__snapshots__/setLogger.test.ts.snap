// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`createLoggerMiddleware test encryption case 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      Object {
        "how": Object {
          "apiGateway": Object {
            "context": Object {
              "awsRequestId": "11111111-1111-1111-1111-111111111111",
            },
          },
          "userIdentity": Object {
            "jti": "AT.FakeJTIValue",
          },
        },
        "logMetadata": Object {
          "category": "Audit Event",
          "encryptedFields": Array [
            "who.userIdentity.sub",
            "who.userIdentity.fhirUser",
            "what.apiGateway.event.queryStringParameters",
            "what.requestContext.path",
            "what.apiGateway.event.pathParameters.proxy",
            "where.requestContext.identity.sourceIp",
            "responseOther.userIdentity.launch-response-patient",
          ],
          "encryptedPayLoad": Object {
            "responseOther": Object {
              "userIdentity": Object {
                "launch-response-patient": "https://example.execute-api.us-east-1.amazonaws.com/dev/Practitioner/00000000-0000-0000-0000-000000000000",
              },
            },
            "what": Object {
              "apiGateway": Object {
                "event": Object {
                  "pathParameters": Object {
                    "proxy": "patient/00000000-0000-0000-0000-000000000000",
                  },
                  "queryStringParameters": Object {
                    "name": "FakeName",
                  },
                },
              },
              "requestContext": Object {
                "path": "/dev/Patient",
              },
            },
            "where": Object {
              "requestContext": Object {
                "identity": Object {
                  "sourceIp": "0.0.0.0",
                },
              },
            },
            "who": Object {
              "userIdentity": Object {
                "fhirUser": "https://example.execute-api.us-east-1.amazonaws.com/dev/Practitioner/00000000-0000-0000-0000-000000000000",
                "sub": "example@amazon.com",
              },
            },
          },
          "timestamp": "2023-02-07T22:51:27.465Z",
          "uid": "8840d6d3-a0f7-4847-8518-7cfbae8feb27",
        },
        "requestOther": Object {
          "requestContext": Object {
            "stage": "dev",
          },
        },
        "responseOther": Object {
          "userIdentity": Object {
            "aud": "FakeAudience",
            "auth-time": "2023-01-10T21:40:22.000Z",
            "exp": "1975-04-21T19:04:04.000Z",
            "iat": "1975-04-21T18:47:24.000Z",
            "iss": "FakeIssuer",
            "launch-response-patient": "https://example.execute-api.us-east-1.amazonaws.com/dev/Practitioner/encrypted",
            "scp": Array [
              "FakeScope1",
              "FakeScope2",
              "FakeScope3",
            ],
          },
        },
        "what": Object {
          "apiGateway": Object {
            "event": Object {
              "httpMethod": "GET",
              "pathParameters": Object {
                "proxy": "patient/encrypted",
              },
              "queryStringParameters": "encrypted",
            },
          },
          "requestContext": Object {
            "httpMethod": "GET",
            "path": "/dev/Patient",
          },
          "userIdentity": Object {
            "scopes": Array [
              "FakeScope1",
              "FakeScope2",
              "FakeScope3",
            ],
            "usableScopes": Array [
              "FakeScope2",
              "FakeScope3",
            ],
          },
        },
        "when": Object {
          "requestContext": Object {
            "requestTimeEpoch": "1970-01-20T08:49:29.044Z",
          },
        },
        "where": Object {
          "User-agent": "FakeUserAgent",
          "apiGateway": Object {
            "Context": Object {
              "logGroupName": "FakeLogGroupName",
              "logStreamName": "FakeLogStreamName",
            },
          },
          "requestContext": Object {
            "domainName": "FakeDomainName",
            "identity": Object {
              "sourceIp": "encrypted",
            },
          },
        },
        "who": Object {
          "apiKeyId": "FakeApiKeyId",
          "userIdentity": Object {
            "cognito:groups": undefined,
            "cognito:username": undefined,
            "custom:tenantId": undefined,
            "fhirUser": "https://example.execute-api.us-east-1.amazonaws.com/dev/Practitioner/encrypted",
            "sub": "encrypted",
          },
        },
      },
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`createLoggerMiddleware test no encrypt case 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "{
 \\"logMetadata\\": {
  \\"uid\\": \\"9710e5c5-53b2-4f7a-aaf4-23dc7980dc04\\",
  \\"timestamp\\": \\"2023-02-07T22:51:27.469Z\\",
  \\"category\\": \\"Audit Event\\"
 },
 \\"who\\": {
  \\"userIdentity\\": {
   \\"sub\\": \\"example@amazon.com\\",
   \\"fhirUser\\": \\"https://example.execute-api.us-east-1.amazonaws.com/dev/Practitioner/00000000-0000-0000-0000-000000000000\\"
  },
  \\"apiKeyId\\": \\"FakeApiKeyId\\"
 },
 \\"what\\": {
  \\"userIdentity\\": {
   \\"scopes\\": [
    \\"FakeScope1\\",
    \\"FakeScope2\\",
    \\"FakeScope3\\"
   ],
   \\"usableScopes\\": [
    \\"FakeScope2\\",
    \\"FakeScope3\\"
   ]
  },
  \\"requestContext\\": {
   \\"path\\": \\"/dev/Patient\\",
   \\"httpMethod\\": \\"GET\\"
  },
  \\"apiGateway\\": {
   \\"event\\": {
    \\"httpMethod\\": \\"GET\\",
    \\"queryStringParameters\\": {
     \\"name\\": \\"FakeName\\"
    },
    \\"pathParameters\\": {
     \\"proxy\\": \\"patient/00000000-0000-0000-0000-000000000000\\"
    }
   }
  }
 },
 \\"when\\": {
  \\"requestContext\\": {
   \\"requestTimeEpoch\\": \\"1970-01-02T22:28:57.044Z\\"
  }
 },
 \\"where\\": {
  \\"apiGateway\\": {
   \\"Context\\": {
    \\"logGroupName\\": \\"FakeLogGroupName\\",
    \\"logStreamName\\": \\"FakeLogStreamName\\"
   }
  },
  \\"User-agent\\": \\"FakeUserAgent\\",
  \\"requestContext\\": {
   \\"domainName\\": \\"FakeDomainName\\",
   \\"identity\\": {
    \\"sourceIp\\": \\"0.0.0.0\\"
   }
  }
 },
 \\"how\\": {
  \\"apiGateway\\": {
   \\"context\\": {
    \\"awsRequestId\\": \\"11111111-1111-1111-1111-111111111111\\"
   }
  },
  \\"userIdentity\\": {
   \\"jti\\": \\"AT.FakeJTIValue\\"
  }
 },
 \\"requestOther\\": {
  \\"requestContext\\": {
   \\"stage\\": \\"dev\\"
  }
 },
 \\"responseOther\\": {
  \\"userIdentity\\": {
   \\"launch-response-patient\\": \\"https://example.execute-api.us-east-1.amazonaws.com/dev/Practitioner/00000000-0000-0000-0000-000000000000\\",
   \\"iss\\": \\"FakeIssuer\\",
   \\"aud\\": \\"FakeAudience\\",
   \\"scp\\": [
    \\"FakeScope1\\",
    \\"FakeScope2\\",
    \\"FakeScope3\\"
   ],
   \\"iat\\": \\"1975-04-21T18:47:24.000Z\\",
   \\"exp\\": \\"1975-04-21T19:04:04.000Z\\",
   \\"auth-time\\": \\"2023-01-10T21:40:22.000Z\\"
  }
 }
}",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`createLoggerMiddleware test null value in a field to encrypt case 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      Object {
        "how": Object {
          "apiGateway": Object {
            "context": Object {
              "awsRequestId": "11111111-1111-1111-1111-111111111111",
            },
          },
          "userIdentity": Object {
            "jti": "AT.FakeJTIValue",
          },
        },
        "logMetadata": Object {
          "category": "Audit Event",
          "encryptedFields": Array [
            "who.userIdentity.sub",
            "who.userIdentity.fhirUser",
            "what.apiGateway.event.queryStringParameters",
            "what.requestContext.path",
            "what.apiGateway.event.pathParameters.proxy",
            "where.requestContext.identity.sourceIp",
            "responseOther.userIdentity.launch-response-patient",
          ],
          "encryptedPayLoad": Object {
            "responseOther": Object {
              "userIdentity": Object {
                "launch-response-patient": "https://example.execute-api.us-east-1.amazonaws.com/dev/Practitioner/00000000-0000-0000-0000-000000000000",
              },
            },
            "what": Object {
              "apiGateway": Object {
                "event": Object {
                  "pathParameters": Object {
                    "proxy": "patient/00000000-0000-0000-0000-000000000000",
                  },
                  "queryStringParameters": null,
                },
              },
              "requestContext": Object {
                "path": "/dev/Patient",
              },
            },
            "where": Object {
              "requestContext": Object {
                "identity": Object {
                  "sourceIp": "0.0.0.0",
                },
              },
            },
            "who": Object {
              "userIdentity": Object {
                "fhirUser": "https://example.execute-api.us-east-1.amazonaws.com/dev/Practitioner/00000000-0000-0000-0000-000000000000",
                "sub": "example@amazon.com",
              },
            },
          },
          "timestamp": "2023-02-07T22:51:27.469Z",
          "uid": "b71b3858-b464-4be8-a84e-b0eacfa94f98",
        },
        "requestOther": Object {
          "requestContext": Object {
            "stage": "dev",
          },
        },
        "responseOther": Object {
          "userIdentity": Object {
            "aud": "FakeAudience",
            "auth-time": "2023-01-10T21:40:22.000Z",
            "exp": "1975-04-21T19:04:04.000Z",
            "iat": "1975-04-21T18:47:24.000Z",
            "iss": "FakeIssuer",
            "launch-response-patient": "https://example.execute-api.us-east-1.amazonaws.com/dev/Practitioner/encrypted",
            "scp": Array [
              "FakeScope1",
              "FakeScope2",
              "FakeScope3",
            ],
          },
        },
        "what": Object {
          "apiGateway": Object {
            "event": Object {
              "httpMethod": "GET",
              "pathParameters": Object {
                "proxy": "patient/encrypted",
              },
              "queryStringParameters": null,
            },
          },
          "requestContext": Object {
            "httpMethod": "GET",
            "path": "/dev/Patient",
          },
          "userIdentity": Object {
            "scopes": Array [
              "FakeScope1",
              "FakeScope2",
              "FakeScope3",
            ],
            "usableScopes": Array [
              "FakeScope2",
              "FakeScope3",
            ],
          },
        },
        "when": Object {
          "requestContext": Object {
            "requestTimeEpoch": "1970-01-02T22:28:57.044Z",
          },
        },
        "where": Object {
          "User-agent": "FakeUserAgent",
          "apiGateway": Object {
            "Context": Object {
              "logGroupName": "FakeLogGroupName",
              "logStreamName": "FakeLogStreamName",
            },
          },
          "requestContext": Object {
            "domainName": "FakeDomainName",
            "identity": Object {
              "sourceIp": "encrypted",
            },
          },
        },
        "who": Object {
          "apiKeyId": "FakeApiKeyId",
          "userIdentity": Object {
            "cognito:groups": undefined,
            "cognito:username": undefined,
            "custom:tenantId": undefined,
            "fhirUser": "https://example.execute-api.us-east-1.amazonaws.com/dev/Practitioner/encrypted",
            "sub": "encrypted",
          },
        },
      },
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;
